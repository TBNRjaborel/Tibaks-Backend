// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tibaks_Backend.Data;

#nullable disable

namespace Tibaks_Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251012160228_ModifiedChild")]
    partial class ModifiedChild
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tibaks_Backend.Auth.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Tibaks_Backend.Models.Child", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateOnly>("UpdatedAt")
                        .HasColumnType("date");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("Tibaks_Backend.Models.HealthcareWorker", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HealthcareWorkers");
                });

            modelBuilder.Entity("Tibaks_Backend.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CivilStatus_Mother")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("Tibaks_Backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Tibaks_Backend.Models.Vaccination", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BatchLotNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ChildId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly?>("DateAdministered")
                        .HasColumnType("date");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("DoseNumber")
                        .HasColumnType("integer");

                    b.Property<string>("HealthcareWorkerId")
                        .HasColumnType("text");

                    b.Property<int>("VaccineId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("HealthcareWorkerId");

                    b.HasIndex("VaccineId");

                    b.ToTable("Vaccinations");
                });

            modelBuilder.Entity("Tibaks_Backend.Models.Vaccine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RecommendedDosage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SiteOfAdministration")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Vaccines");
                });

            modelBuilder.Entity("Tibaks_Backend.Models.Child", b =>
                {
                    b.OwnsOne("Tibaks_Backend.Models.AddressInfo", "Address", b1 =>
                        {
                            b1.Property<string>("ChildId")
                                .HasColumnType("text");

                            b1.Property<string>("HomeAddress")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("character varying(250)");

                            b1.Property<string>("NearestLandmark")
                                .HasMaxLength(250)
                                .HasColumnType("character varying(250)");

                            b1.HasKey("ChildId");

                            b1.ToTable("Children");

                            b1.WithOwner()
                                .HasForeignKey("ChildId");
                        });

                    b.OwnsOne("Tibaks_Backend.Models.ChildInfo", "ChildInfo", b1 =>
                        {
                            b1.Property<string>("ChildId")
                                .HasColumnType("text");

                            b1.Property<int>("BirthOrder")
                                .HasColumnType("integer");

                            b1.Property<string>("BirthWeight")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<DateOnly>("DateAssessed")
                                .HasColumnType("date");

                            b1.Property<DateOnly>("DateOfBirth")
                                .HasColumnType("date");

                            b1.Property<DateOnly>("DateReferredForNewbornScreening")
                                .HasColumnType("date");

                            b1.Property<int>("FeedingType")
                                .HasColumnType("integer");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("MiddleName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("PlaceOfDelivery")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<byte>("Sex")
                                .HasColumnType("smallint");

                            b1.Property<string>("Suffix")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.HasKey("ChildId");

                            b1.ToTable("Children");

                            b1.WithOwner()
                                .HasForeignKey("ChildId");
                        });

                    b.OwnsOne("Tibaks_Backend.Models.FatherInfo", "Father", b1 =>
                        {
                            b1.Property<string>("ChildId")
                                .HasColumnType("text");

                            b1.Property<string>("ContactNumber")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.Property<DateOnly>("DateOfBirth")
                                .HasColumnType("date");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Occupation")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.HasKey("ChildId");

                            b1.ToTable("Children");

                            b1.WithOwner()
                                .HasForeignKey("ChildId");
                        });

                    b.OwnsOne("Tibaks_Backend.Models.MotherInfo", "Mother", b1 =>
                        {
                            b1.Property<string>("ChildId")
                                .HasColumnType("text");

                            b1.Property<string>("ContactNumber")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.Property<DateOnly>("DateOfBirth")
                                .HasColumnType("date");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Occupation")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("PhicNumber")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<DateOnly>("TetanusToxoidDate")
                                .HasColumnType("date");

                            b1.Property<string>("TetanusToxoidStatus")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.HasKey("ChildId");

                            b1.ToTable("Children");

                            b1.WithOwner()
                                .HasForeignKey("ChildId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("ChildInfo")
                        .IsRequired();

                    b.Navigation("Father")
                        .IsRequired();

                    b.Navigation("Mother")
                        .IsRequired();
                });

            modelBuilder.Entity("Tibaks_Backend.Models.Vaccination", b =>
                {
                    b.HasOne("Tibaks_Backend.Models.Child", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tibaks_Backend.Models.HealthcareWorker", "HealthcareWorker")
                        .WithMany()
                        .HasForeignKey("HealthcareWorkerId");

                    b.HasOne("Tibaks_Backend.Models.Vaccine", "Vaccine")
                        .WithMany()
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("HealthcareWorker");

                    b.Navigation("Vaccine");
                });
#pragma warning restore 612, 618
        }
    }
}
